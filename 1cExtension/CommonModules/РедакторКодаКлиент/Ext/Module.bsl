Асинх Процедура ВыполнитьДействие(Команда, Элемент, Форма) Экспорт
	стрКоманда=?(ТипЗнч(Команда)=Тип("Строка"), Команда, Команда.Имя);
	Если стрКоманда="КонструкторЗапроса" Тогда
		КонструкторЗапросаВызвать(Элемент, View(Элемент).getQuery());
		
	ИначеЕсли стрКоманда="ЗагрузитьСниппетыИзФайла" Тогда
		ЗагрузитьСниппеты(Элемент);
		
	ИначеЕсли стрКоманда="ркБыстрыеПодсказки" Тогда
		Пометка=НЕ Форма.Элементы[стрКоманда].Пометка;
		View(Элемент).enableQuickSuggestions(Пометка);
		Форма.Элементы[стрКоманда].Пометка=Пометка;
		
	ИначеЕсли стрКоманда="ркЗаменитьВхождения" Тогда
		View(Элемент).editor.trigger("", "editor.action.changeAll");
		
	ИначеЕсли стрКоманда="ркКартаКода" Тогда
		Пометка=НЕ Форма.Элементы[стрКоманда].Пометка;
		View(Элемент).minimap(Пометка);
		Форма.Элементы[стрКоманда].Пометка=Пометка;

	ИначеЕсли стрКоманда="ркПодсвечиватьЗапросы" Тогда
		Пометка=НЕ Форма.Элементы[стрКоманда].Пометка;
		Форма.Элементы[стрКоманда].Пометка=Пометка;		
		ИмяТемы=ПолучитьИмяТемы(Форма)+?(Пометка, "-query", "");
		Элемент.Документ.monaco.editor.setTheme(ИмяТемы);

	ИначеЕсли стрКоманда="ркСтрокаСостояния" Тогда
		Пометка=НЕ Форма.Элементы[стрКоманда].Пометка;
		Форма.Элементы[стрКоманда].Пометка=Пометка;
		Если Пометка Тогда
			View(Элемент).showStatusBar();
		Иначе
			View(Элемент).hideStatusBar();
		КонецЕсли;

	ИначеЕсли стрКоманда="ркОтключитьРежимСравнения" Тогда
		View(Элемент).compare();
		View(Элемент).setOriginalText(ПолучитьТекст(Элемент));
		View(Элемент).setReadOnly(Истина);

	ИначеЕсли стрКоманда="ркПредыдущееРасхождение" Тогда
		View(Элемент).previousDiff();

	ИначеЕсли стрКоманда="ркСледующееРасхождение" Тогда
		View(Элемент).nextDiff();

	ИначеЕсли стрКоманда="ркЯзыкПодсказок" Тогда
		View(Элемент).switchLang();
		Пометка=НЕ Форма.Элементы[стрКоманда].Пометка;
		Форма.Элементы[стрКоманда].Пометка=Пометка;
		Если Пометка Тогда
			Форма.Элементы[стрКоманда].Заголовок="Переключить подсказки на русский язык";
		Иначе
			Форма.Элементы[стрКоманда].Заголовок="Переключить подсказки на английский язык";
		КонецЕсли;

	ИначеЕсли стрКоманда="ркИзменитьРазмерШрифта" Тогда
		Размер=Ждать ВвестиЧислоАсинх(20, "Размер шрифта", 3);
		Если Размер=Неопределено Тогда Возврат; КонецЕсли;
		View(Элемент).setFontSize(Размер);

	ИначеЕсли стрКоманда="ркВыполнитьНаКлиенте" Тогда
		РедакторКодаКлиент.ВыполнитьКод(ПолучитьТекст(Элемент));

	ИначеЕсли стрКоманда="ркВыполнитьНаСервере" Тогда
		РедакторКодаСервер.ВыполнитьКод(ПолучитьТекст(Элемент));

	ИначеЕсли стрКоманда="ркСветлаяТема" Или стрКоманда="ркТемнаяТема" Тогда
		Для Каждого ЭлементФормы Из Форма.Элементы.ркТемы.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Пометка=ЭлементФормы.Имя=стрКоманда;
		КонецЦикла;		
		ИмяТемы=ПолучитьИмяТемы(Форма);
		Элемент.Документ.monaco.editor.setTheme(ИмяТемы);
	КонецЕсли;
КонецПроцедуры 

Процедура ВыполнитьКод(Текст, ПараметрыАлгоритма=Неопределено) Экспорт
	Если СтрНайти(Текст, "&НаКлиенте")=0 И СтрНайти(Текст, "&НаСервере")=0 Тогда
		РедакторКодаОбщий.ВыполнитьКод(Текст); Возврат;
	КонецЕсли;

	стрМодуль=Текст;

	МассивФункций=Новый Массив;
	МассивПроцедур=Новый Массив;

	СтруктураКодаНаКлиенте=Новый Структура;
	СтруктураКодаНаСервере=Новый Структура;
	
	МассивСтрок=СтрРазделить(стрМодуль, Символы.ПС);
	Для каждого СтрокаКода Из МассивСтрок Цикл
		СтрокаКода=СокрЛП(СтрокаКода);

		Если ВРЕГ(СтрокаКода)="&НАКЛИЕНТЕ" ИЛИ ВРЕГ(СтрокаКода)="&НАСЕРВЕРЕ" Тогда
			СтруктураКода=?(ВРЕГ(СтрокаКода)="&НАКЛИЕНТЕ", СтруктураКодаНаКлиенте, СтруктураКодаНаСервере);
			Продолжить;
		КонецЕсли;

		Строка=ВРЕГ(СтрокаКода); ЭтоПроцедура=Лев(Строка, 9)="ПРОЦЕДУРА"; ЭтоФункция=Лев(Строка, 7)="ФУНКЦИЯ";
		Если ЭтоПроцедура ИЛИ ЭтоФункция Тогда
			ИмяПроцедуры=СтрРазделить(СтрокаКода, " ", Ложь)[1];
			ИмяПроцедуры=стрЗаменить(ИмяПроцедуры, "(", "");
			ИмяПроцедуры=стрЗаменить(ИмяПроцедуры, ")", "");
			СтруктураКода.Вставить(ИмяПроцедуры, "");
			
			Если ЭтоФункция Тогда
				МассивФункций.Добавить(ИмяПроцедуры);	
			ИначеЕсли ЭтоПроцедура Тогда
				МассивПроцедур.Добавить(ИмяПроцедуры);	
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		Если Строка="КОНЕЦПРОЦЕДУРЫ" ИЛИ Строка="КОНЕЦФУНКЦИИ" Тогда
			Продолжить;
		КонецЕсли;

		Массив=СтрРазделить(СтрокаКода, " ", Ложь);
		Если Массив.Количество()>1 Тогда
			Если ВРЕГ(Массив[0])="ВОЗВРАТ" Тогда
				Массив=СтрРазделить(Массив[1], ";");
				СтрокаКода="ПараметрыВыполнения.Вставить("""+ИмяПроцедуры+""", "+Массив[0]+");";
			КонецЕсли;
		КонецЕсли;

		ТекущийМодуль=СтруктураКода[ИмяПроцедуры];
		СтруктураКода.Вставить(ИмяПроцедуры, ?(ПустаяСтрока(ТекущийМодуль), "", ТекущийМодуль+Символы.ПС)+СтрокаКода);
	КонецЦикла;
	
	//Меняем вызовы функций на "ПараметрыВыполнения."+НазваниеФункции
	МассивДанных=Новый Массив;
	МассивДанных.Добавить(СтруктураКодаНаКлиенте);
	МассивДанных.Добавить(СтруктураКодаНаСервере);
	
	Для каждого ИмяФункции Из МассивФункций Цикл
		Для каждого СтрокаКоллекции1 Из МассивДанных Цикл
			Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1 Цикл
				СтрокаПоиска=ИмяФункции+"()";
				ВыполняемыйМодуль=СтрокаКоллекции2.Значение;
				Если НЕ стрНайти(ВыполняемыйМодуль, СтрокаПоиска)=0 Тогда
					СтрокаЗамены="ПараметрыВыполнения."+ИмяФункции;
					ВыполняемыйМодуль=стрЗаменить(ВыполняемыйМодуль, СтрокаПоиска, СтрокаЗамены);
					СтрокаКоллекции1.Вставить(СтрокаКоллекции2.Ключ, ВыполняемыйМодуль);
				КонецЕсли;				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	//Проверяем существование процедуры "Main"
	Если СтруктураКодаНаКлиенте.Свойство("Main") Тогда
		ВариантВыполненияОсновногоМодуля="НаКлиенте";
		стрОсновнойМодуль=СтруктураКодаНаКлиенте.Main;
	КонецЕсли;
	Если стрОсновнойМодуль=Неопределено Тогда
		Если РедакторКодаСервер.Свойство("Main") Тогда
			ВариантВыполненияОсновногоМодуля="НаСервере";
			стрОсновнойМодуль=РедакторКодаСервер.Main;
		КонецЕсли;
	КонецЕсли;
	Если стрОсновнойМодуль=Неопределено Тогда
		Сообщить("Отсутствует обязательная процедура ""Main"""); Возврат;
	КонецЕсли;
	
	//Выстраиваем порядок выполнения процедур\функций
	ПорядокВыполненияКода=Новый СписокЗначений;

	МассивСтрок=стрРазделить(стрОсновнойМодуль, Символы.ПС, Ложь);
	Для каждого СтрокаМасива Из МассивСтрок Цикл
		Позиция=СтрНайти(СтрокаМасива, "ПараметрыВыполнения.");
		Если Позиция=0 Тогда Продолжить; КонецЕсли;

		Для каждого СтрокаКоллекции Из СтруктураКодаНаКлиенте Цикл
			Позиция=СтрНайти(СтрокаМасива, "ПараметрыВыполнения."+СтрокаКоллекции.Ключ);
			Если НЕ Позиция=0 Тогда 
				ПорядокВыполненияКода.Добавить("НаКлиенте_"+СтрокаКоллекции.Ключ, СтрокаКоллекции.Значение);
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		Для каждого СтрокаКоллекции Из СтруктураКодаНаСервере Цикл
			Позиция=СтрНайти(СтрокаМасива, "ПараметрыВыполнения."+СтрокаКоллекции.Ключ);
			Если НЕ Позиция=0 Тогда 
				ПорядокВыполненияКода.Добавить("НаСервере_"+СтрокаКоллекции.Ключ, СтрокаКоллекции.Значение);
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	ПорядокВыполненияКода.Добавить(ВариантВыполненияОсновногоМодуля+"_Main", стрОсновнойМодуль);

	//Выполняем код	
	ПараметрыВыполнения=Новый Структура;
	Для каждого СтрокаКоллекции Из ПорядокВыполненияКода Цикл
		Если Лев(СтрокаКоллекции.Значение, 9)="НаКлиенте" Тогда
			РедакторКодаКлиент.ВыполнитьМодуль(СтруктураКодаНаКлиенте, ПараметрыВыполнения, ПараметрыАлгоритма);
		Иначе
			РедакторКодаСервер.ВыполнитьМодуль(СтруктураКодаНаСервере, ПараметрыВыполнения, ПараметрыАлгоритма);
		КонецЕсли;
	КонецЦикла;

	//РедакторКодаСервер.ВыполнитьМодуль(СтруктураКодаНаСервере, ПараметрыВыполнения);
	//РедакторКодаКлиент.ВыполнитьМодуль(СтруктураКодаНаКлиенте, ПараметрыВыполнения);	
КонецПроцедуры

Процедура ВыполнитьМодуль(СтруктураКода, ПараметрыВыполнения=Неопределено, ПараметрыАлгоритма=Неопределено) Экспорт
	Для каждого СтрокаКоллекции Из СтруктураКода Цикл
		Выполнить(СтрокаКоллекции.Значение);
	КонецЦикла;	
КонецПроцедуры

Процедура ВыполнитьАлгоритм(Ссылка) Экспорт
	ПараметрыАлгоритма=РедакторКодаСервер.СформироватьСтруктуруАлгоритма(Ссылка);
	ВыполнитьКод(ПараметрыАлгоритма.ВыполняемыйМодуль, ПараметрыАлгоритма);
КонецПроцедуры

Функция ПолучитьИмяТемы(Форма)
	ИмяТемы="bsl-white";
	
	Если НЕ Форма.Элементы.Найти("ркТемы")=Неопределено Тогда
		Имена=Новый Соответствие();
		Имена.Вставить("ркСветлаяТема", "bsl-white");
		Имена.Вставить("ркТемнаяТема", "bsl-dark");	
		Для Каждого Элемент Из Форма.Элементы.ркТемы.ПодчиненныеЭлементы Цикл
			Если Элемент.Пометка Тогда
				ИмяТемы=Имена[Элемент.Имя];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ИмяТемы;	
КонецФункции

Функция Инициализация() ЭКспорт
	#Если ВебКлиент Тогда
		Возврат "https://salexdv.github.io/bsl_console/src/index.html";
	#Иначе
		КаталогИсходников=КаталогВременныхФайлов()+"bsl_console\";
		СуществуетКаталог(КаталогИсходников, Истина, Ложь);
		Попытка			
			ДвоичныеДанные=РедакторКодаСервер.ПолучитьМакет("src");			
			Файл=Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
			Файл.ИзвлечьВсе(КаталогИсходников);
			Возврат КаталогИсходников+"index.html";
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось извлечь исходники"+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	Возврат "";
КонецФункции

Процедура ИнициализацияРедактора(Элемент, Форма) Экспорт
	Инфо=Новый СистемнаяИнформация();
	
	HTML=View(Элемент);
	HTML.init(Инфо.ВерсияПриложения);
	HTML.setOption("autoResizeEditorLayout", Истина);
	HTML.setOption("renderQueryDelimiters", Истина);
	HTML.hideScrollX();
	HTML.hideScrollY();
	HTML.enableModificationEvent(Истина);
	HTML.minimap(Ложь); //отключим отображение карты кода
	HTML.clearMetadata();
	
	ЭлементФормы=Форма.Элементы.Найти("ркПодсвечиватьЗапросы");
	Если НЕ ЭлементФормы=Неопределено Тогда
		ЭлементФормы.Пометка=Истина;
	КонецЕсли;

	ЭлементФормы=Форма.Элементы.Найти("ркСветлаяТема");
	Если НЕ ЭлементФормы=Неопределено Тогда
		ЭлементФормы.Пометка=Истина;
	КонецЕсли;

	ЭлементФормы=Форма.Элементы.Найти("ркБыстрыеПодсказки");
	Если НЕ ЭлементФормы=Неопределено Тогда
		ЭлементФормы.Пометка=Истина;
	КонецЕсли;

	ОбновитьМодулиМетаданных(Элемент);
КонецПроцедуры

Асинх Процедура ОбновитьМодулиМетаданных(Элемент) Экспорт
	View(Элемент).clearMetadata();

	ДанныеРедактора=РедакторКодаСервер.ПараметрыТекущегоСеанса();
	Если НЕ View(Элемент).updateMetadata(ДанныеРедактора.МодулиОбщиеJSON, "commonModules.items") Тогда Возврат; КонецЕсли;

	КаталогИсходногоКода=КаталогИсходногоКода();
	Если НЕ ЗначениеЗаполнено(КаталогИсходногоКода) Тогда Возврат; КонецЕсли;
	
	КаталогНаДиске=Новый Файл(КаталогИсходногоКода+"CommonModules");
	Если НЕ КаталогНаДиске.Существует() Тогда Возврат; КонецЕсли;

	РазделительПути=ПолучитьРазделительПути();

	Соответствие=Новый Соответствие;
	Соответствие.Вставить(Истина, JSON_Общий.Прочитать(ДанныеРедактора.МодулиГлобальныеJSON));
	Соответствие.Вставить(Ложь, JSON_Общий.Прочитать(ДанныеРедактора.МодулиОбщиеJSON));
	Для каждого СтрокаКоллекции1 Из Соответствие Цикл
		Для каждого СтрокаКоллекции2 Из СтрокаКоллекции1.Значение Цикл
			ФайлМодуля=СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, СтрокаКоллекции2.Ключ);
			ФайлМодуля=КаталогИсходногоКода+ФайлМодуля; Глобальный=СтрокаКоллекции1.Ключ;
			Если НЕ Ждать СуществуетФайл(ФайлМодуля) Тогда Продолжить; КонецЕсли;

			ОбщийМодуль=МодульИзИсходников(ФайлМодуля);
			View(Элемент).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

Функция View(Элемент) Экспорт
	Возврат Элемент.Документ.defaultView;
КонецФункции

Функция ЕстьКод(Элемент)
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст(Элемент)), Символы.ПС, ""));	
КонецФункции

Функция ВебДокументДоступен(Элемент)
	Если Элемент.Документ=Неопределено Тогда Возврат Ложь; КонецЕсли;
	Если Элемент.Документ.defaultView=Неопределено Тогда Возврат Ложь; КонецЕсли;
	Попытка ПолучитьТекст(Элемент); Возврат Истина;
	Исключение Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура ОбработкаСобытияПолученияМетаданных(Элемент, Событие)
	ПараметрыЗапроса = НРег(Событие.params);
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		Если ЧастиЗапроса[0] = "module" Тогда
			Если ЧастиЗапроса.Количество()=2 Тогда
				ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(Элемент, ЧастиЗапроса);
			Иначе
				ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(Элемент, ЧастиЗапроса);
			КонецЕсли;
		Иначе
			ЗагрузитьОбъектМетаданныхПоЗапросу(Элемент, ПараметрыЗапроса);
		КонецЕсли;
	Иначе
		ЗагрузитьСписокМетаданныхПоЗапросу(Элемент, ПараметрыЗапроса);
	КонецЕсли;
КонецПроцедуры

Функция МодульИзИсходников(ПолноеИмяФайла)
	Путь=СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути(), Ложь);
	ИмяМодуля=Путь[Путь.Количество()-3];
	
	Текст=Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);

	Возврат Новый Структура("Имя, Текст", ИмяМодуля, Текст.ПолучитьТекст());
КонецФункции

Функция КаталогИсходногоКода()
	КаталогИсходногоКода=РедакторКодаСервер.ЗначениеКонстантыПолучить("КаталогИсходногоКодаКонфигурации");
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		РазделительПути=ПолучитьРазделительПути();
		КаталогИсходногоКода=СокрЛП(КаталогИсходногоКода);
		Если НЕ Прав(КаталогИсходногоКода, 1)=РазделительПути Тогда
			КаталогИсходногоКода=КаталогИсходногоКода+РазделительПути;
		КонецЕсли;			
	КонецЕсли;
	Возврат КаталогИсходногоКода;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка файлов

Асинх Функция СуществуетКаталог(ИмяКаталога, СоздаватьПриОтсутствии=Истина, ЗадатьВопросПриСозданииКаталога=Истина) Экспорт
	КаталогНаДиске=Новый Файл(ИмяКаталога);
	Если Ждать КаталогНаДиске.СуществуетАсинх() Тогда Возврат Истина; КонецЕсли;

	Если СоздаватьПриОтсутствии Тогда
		Ответ=РежимДиалогаВопрос.Да;
		Если ЗадатьВопросПриСозданииКаталога Тогда
			Ответ=ВопросАсинх("Указанный каталог не существует. Создать каталог?", РежимДиалогаВопрос.ДаНет);	
		КонецЕсли;		
		Если Ответ=КодВозвратаДиалога.Да Тогда Ждать СоздатьКаталогАсинх(ИмяКаталога); Возврат Истина; КонецЕсли;
    КонецЕсли;

	Возврат Ложь;
КонецФункции

Асинх Функция СуществуетФайл(ИмяФайла) Экспорт
	ФайлНаДиске=Новый Файл(ИмяФайла);
	Возврат Ждать ФайлНаДиске.СуществуетАсинх(); 
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Конструктор форматной строки

Асинх Процедура КонструкторФорматнойСтрокиОткрыть(Элемент, ФорматнаяСтрока, ДопПараметры) Экспорт
	Конструктор=Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст=ФорматнаяСтрока;
	Исключение
		Инфо=ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:"+Символы.ПС+Инфо.Причина.Описание, 20, "Внимание");
		Возврат;
	КонецПопытки;

	ФорматнаяСтрока=Ждать Конструктор.ОткрытьАсинх();
	Если ФорматнаяСтрока=Неопределено Тогда	Возврат; КонецЕсли;
	
	ФорматнаяСтрока=СтрЗаменить(ФорматнаяСтрока, "'", "");
	ФорматнаяСтрока=""""+ФорматнаяСтрока+"""";
	УстановитьТекст(Элемент, ФорматнаяСтрока, ДопПараметры, Ложь);
КонецПроцедуры

Асинх Процедура КонструкторФорматнойСтрокиВызвать(Элемент, ПараметрыСтроки) Экспорт
	Если ПараметрыСтроки=Неопределено Тогда
		ТекстВопроса="Форматная строка не найдена."+Символы.ПС+"Создать новую форматную строку?";		
		Ответ=Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
		Если Ответ=КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
		КонструкторФорматнойСтрокиОткрыть(Элемент, "", Неопределено);
	Иначе
		ФорматнаяСтрока=СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		КонструкторФорматнойСтрокиОткрыть(Элемент, ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Конструктор запросов

Асинх Процедура КонструкторЗапросаОткрыть(Элемент, Текст, ДопПараметры)
	//View(Элемент).switchQueryMode();

	Конструктор=Новый КонструкторЗапроса();
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст=Текст;
		Исключение
			Инфо=ИнформацияОбОшибке();
			ПоказатьПредупреждение(, "Ошибка в тексте запроса:"+Символы.ПС+Инфо.Причина.Описание, 20, "Внимание");
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Текст=Ждать Конструктор.ОткрытьАсинх();
	Если Текст=Неопределено Тогда Возврат; КонецЕсли;

	Если Не View(Элемент).queryMode Тогда
		Текст=СтрЗаменить(Текст, Символы.ПС, Символы.ПС+"|");
		Текст=СтрЗаменить(Текст, """", """""");
		Текст= """"+Текст+"""";
	КонецЕсли;

	УстановитьТекст(Элемент, Текст, ДопПараметры, Истина);
КонецПроцедуры

Асинх Процедура КонструкторЗапросаВызвать(Элемент, ПараметрыЗапроса)
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		ТекстВопроса="Не найден текст запроса."+Символы.ПС+"Создать новый запрос?";
		Ответ=Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
		Если Ответ=КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
		КонструкторЗапросаОткрыть(Элемент, "", Неопределено);
	Иначе
		//ТекстЗапроса=СтрЗаменить(ПараметрыЗапроса.text, "|", "");
		ТекстЗапроса=СтрЗаменить(ПараметрыЗапроса, "|", "");
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, """""", "$");	
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, """", "");	
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "$", """");		
		//КонструкторЗапросаОткрыть(ТекстЗапроса, ПараметрыЗапроса.range);
		КонструкторЗапросаОткрыть(Элемент, ТекстЗапроса, Неопределено);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий редактора (ПолеHTML)

Процедура ПолеHTML_Сформирован(Элемент, Форма) Экспорт
	#Если ВебКлиент Тогда
		Если НЕ ВебДокументДоступен(Элемент) Тогда
			ПоказатьПредупреждение(, "К сожалению, в веб-клиенте недоступны практически все функции.
			|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.", 20, "Внимание");
			Возврат;
		КонецЕсли;
	#КонецЕсли

	ИнициализацияРедактора(Элемент, Форма);
	ЗагрузитьСниппеты(Элемент, "ПользовательскиеСниппеты");
КонецПроцедуры

Процедура ПолеHTML_ПриНажатии(Элемент, Форма, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	Событие=ДанныеСобытия.Event.eventData1C;
	Если Событие=Неопределено Тогда Возврат; КонецЕсли;

	Если Событие.event="EVENT_QUERY_CONSTRUCT" Тогда
		View(Элемент).switchQueryMode();
		КонструкторЗапросаВызвать(Элемент, Событие.params);
	КонецЕсли;

	Если Событие.event="EVENT_FORMAT_CONSTRUCT" Тогда
		КонструкторФорматнойСтрокиВызвать(Элемент, Событие.params);
	КонецЕсли;

	Если Событие.event="EVENT_GET_METADATA" Тогда
		ОбработкаСобытияПолученияМетаданных(Элемент, Событие);
	КонецЕсли;

	Если Событие.event="EVENT_CONTENT_CHANGED" Тогда
		Форма.Модифицированность=Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с текстом редактора (установка, получение, очистка)

Процедура УстановитьТекст(Элемент, Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт
	View(Элемент).setText(Текст, Позиция, УчитыватьОтступПервойСтроки);	
КонецПроцедуры

Функция ПолучитьТекст(Элемент) Экспорт
	Возврат View(Элемент).getText();	
КонецФункции

Функция ОчиститьТекст(Элемент) Экспорт
	Возврат View(Элемент).eraseText();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Загрузка шаблонов

Асинх Процедура ЗагрузитьСниппеты(Элемент, ИмяМакета=Неопределено)
	Если ИмяМакета=Неопределено Тогда
		ДиалогВыбора=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Фильтр="Шаблоны 1С|*.st";
		Файлы=Ждать ДиалогВыбора.ВыбратьАсинх();
		Если Файлы=Неопределено Тогда Возврат; КонецЕсли;

		Файл=Новый ЧтениеТекста(Файлы[0], КодировкаТекста.UTF8);		
		СтрокаШаблона=Файл.Прочитать();
		Файл.Закрыть();
	Иначе
		СтрокаШаблона=РедакторКодаСервер.ПолучитьТекстМакета(ИмяМакета, Истина);
	КонецЕсли;
	View(Элемент).parseSnippets(СтрокаШаблона);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Загрузка структуры модулей

Процедура ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(Элемент, ЧастиЗапроса)
	КаталогИсходногоКода=КаталогИсходногоКода();
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество()=4 Тогда
		СтруктураВыгрузки=Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля"        , ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных"    , ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных" , ЧастиЗапроса[3]);
		СтруктураВыгрузки.Вставить("ИмяКаталога"	  , Неопределено);

		ПолноеИмя=РедакторКодаСервер.ПолноеИмяМетаданных(СтруктураВыгрузки.ТипМетаданных, СтруктураВыгрузки.ОбъектМетаданных);
		Имена=СтрРазделить(ПолноеИмя, ".", Ложь);
		Если Имена.Количество()=2 Тогда
			КаталогТипа=РедакторКодаОбщий.ИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
			Если ЗначениеЗаполнено(КаталогТипа) Тогда
				СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[1]);
				СтруктураВыгрузки.ИмяКаталога=СтрШаблон("%1%2%3", КаталогТипа, ПолучитьРазделительПути(), Имена[1]);
			КонецЕсли;
		КонецЕсли;	

		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			ЗагруженоФункций=ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(Элемент, КаталогИсходногоКода, СтруктураВыгрузки);
			Если НЕ ЗагруженоФункций=0 Тогда
				View(Элемент).triggerSuggestions();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Асинх Процедура ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(Элемент, ЧастиЗапроса)
	КаталогИсходногоКода=КаталогИсходногоКода();
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество()=2 Тогда
		ФайлМодуля=СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", ПолучитьРазделительПути(), ЧастиЗапроса[1]);
		ФайлМодуля=КаталогИсходногоКода+ФайлМодуля; 
		Если НЕ Ждать СуществуетФайл(ФайлМодуля) Тогда Возврат; КонецЕсли;

		ОбщийМодуль=МодульИзИсходников(ФайлМодуля);
		View(Элемент).parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Ложь);
	КонецЕсли;	
КонецПроцедуры 

Процедура ЗагрузитьСписокМетаданныхПоЗапросу(Элемент, ПараметрыЗапроса)
	АдресОбновления="";
	ОписаниеМетаданных=РедакторКодаСервер.СписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);		
	Если НЕ ЗначениеЗаполнено(ОписаниеМетаданных) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(View(Элемент).updateMetadata(ОписаниеМетаданных, АдресОбновления))=Тип("Булево") Тогда
		View(Элемент).triggerSuggestions();
	КонецЕсли;	
КонецПроцедуры

Процедура ЗагрузитьОбъектМетаданныхПоЗапросу(Элемент, ПараметрыЗапроса)
	АдресОбновления="";
	ОписаниеМетаданных=РедакторКодаСервер.ОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	Если НЕ ЗначениеЗаполнено(ОписаниеМетаданных) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(View(Элемент).updateMetadata(ОписаниеМетаданных, АдресОбновления))=Тип("Булево") Тогда
		View(Элемент).triggerSuggestions();
	КонецЕсли;	
КонецПроцедуры

Асинх Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(Элемент, КаталогИсходногоКода, СтруктураВыгрузки)
	ТипМодуля=СтруктураВыгрузки.ТипМодуля;	
	ИмяТипа=?(ТипМодуля="manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля=СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, ПолучитьРазделительПути(), ИмяТипа);
	ФайлМодуля=КаталогИсходногоКода+ФайлМодуля;
	Если НЕ Ждать СуществуетФайл(ФайлМодуля) Тогда Возврат 0; КонецЕсли;

	Модуль=МодульИзИсходников(ФайлМодуля);
	ИмяКоллекции=РедакторКодаОбщий.ИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
	АдресЗагрузки=СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);

	Возврат View(Элемент).parseMetadataModule(Модуль.Текст, АдресЗагрузки);	
КонецФункции
