
Функция ргОбменВходящиеПринять(вхЗадача, Объект, ТелоОтвета, Ошибка) Экспорт
	
	Результат = Ложь;
	Если  вхЗадача.ТелоСообщения = "" Тогда
		Результат = Истина;
	Иначе
		
	    Попытка
		 НачатьТранзакцию();
		  ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоСообщения);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
		СтруктураДокументаОтражения =  ПолучитьСтруктуруИзСоответствия(СтруктураДокументаОтражения); 
		ЧтениеJSON.Закрыть();
		Выполнить(вхЗадача.ВидСообщения.Обработчик);
		 ЗафиксироватьТранзакцию();
		 Результат = Истина;
		Исключение
		  ОтменитьТранзакцию();
		  Ошибка=ОписаниеОшибки();
		КонецПопытки;		

	КонецЕсли;
	   	
		//Для каждого ДанныеСтр Из вхЗадача.ВидСообщения.Данные Цикл
		//
		//Выполнить(ДанныеСтр.Обработчик);	
		//
		//КонецЦикла;
		
		
		
		
		
		
		
		//Если вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("Контрагент") Тогда
	//	Результат = КонтрагентПринять(вхЗадача, Объект, Ошибка); 
	//ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("ДокументИзДиадок") Тогда
	//	Результат = СоздатьДокументДиадок(вхЗадача, Объект, Ошибка); 
	//ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("МатрицаЗаместителей") Тогда
	//	Результат = ДобавитьЗаместителя(вхЗадача, Объект, Ошибка);
	//ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("НаименованиеПользователя") Тогда
	//	Результат = УстановитьРусскоязычноеИмяПОльзователя(вхЗадача, Объект, Ошибка);
	//КонецЕсли;
	Возврат Результат;
	
КонецФункции
 //
 // нужна для уменьшения количекства ошибок
 //
 // Параметры:
 //  <Параметр1>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //  <Параметр2>  - <Тип.Вид> - <описание параметра>
 //                 <продолжение описания параметра>
 //
 // Возвращаемое значение:
 //   <Тип.Вид>   - <описание возвращаемого значения>
 //
 Функция ПолучитьЗначениеСтруктуры(Значение)
 	Попытка
	Выполнить("рез =  Значение;");
	Исключение
	рез = "";
	КонецПопытки;
    Возврат рез;
 КонецФункции // ()
 
//**********************************************
Функция ПолучитьСтруктуруИзСоответствия1(ЗначВход) Экспорт
 
 СтруктураВозврат=Новый Структура;
 
 Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
  
  ФлагОщибка=Ложь;

  Для Каждого р Из ЗначВход Цикл
   Попытка
    СтруктураВозврат.Вставить(р.Ключ,ПолучитьСтруктуруИзСоответствия(р.Значение));
   Исключение
		   СтруктураВозврат.Вставить("Ключ",р.Ключ);
   СтруктураВозврат.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
	   //  ФлагОщибка=Истина;
    //Прервать;
   КонецПопытки;
  КонецЦикла;
  
  // Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
  // СтруктураВозврат = Новый Массив;
  // Для Каждого р Из ЗначВход Цикл
  //  ДопСтруктура=Новый Структура;
  //  ДопСтруктура.Вставить("Ключ",р.Ключ);
  //  ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
  //  СтруктураВозврат.Добавить(ДопСтруктура);
  // КонецЦикла;
  //КонецЕсли;
  //
  Возврат СтруктураВозврат; 
  
 ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
  
  НовыйМассив=Новый Массив;
  Для Каждого ЭлМ Из ЗначВход Цикл
   НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
  КонецЦикла;
  Возврат НовыйМассив;
  
 КонецЕсли;
 
 Возврат ЗначВход; 
 
КонецФункции

Функция ПолучитьСтруктуруИзСоответствия(ЗначВход) Экспорт
	
	СтруктураВозврат=Новый Структура;
	
	Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
		
		ФлагОщибка=Ложь;
		
		Для Каждого р Из ЗначВход Цикл
			Попытка
				СтруктураВозврат.Вставить(СтрЗаменить(СтрЗаменить(р.Ключ,"#",""),"value","Значение"),ПолучитьСтруктуруИзСоответствия(р.Значение));
			Исключение
				
				СтруктураВозврат.Вставить("Ключ",р.Ключ);
				СтруктураВозврат.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
				//  ФлагОщибка=Истина;
				//Прервать;
			КонецПопытки;
		КонецЦикла;
		
		// Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
		// СтруктураВозврат = Новый Массив;
		// Для Каждого р Из ЗначВход Цикл
		//  ДопСтруктура=Новый Структура;
		//  ДопСтруктура.Вставить("Ключ",р.Ключ);
		//  ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
		//  СтруктураВозврат.Добавить(ДопСтруктура);
		// КонецЦикла;
		//КонецЕсли;
		//
		Возврат СтруктураВозврат; 
		
	ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
		
		НовыйМассив=Новый Массив;
		Для Каждого ЭлМ Из ЗначВход Цикл
			НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
		КонецЦикла;
		Возврат НовыйМассив;
		
	КонецЕсли;
	
	Возврат ЗначВход; 
	
КонецФункции


// Функция преобразует ТаблицуЗначений в Массив из структур.
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) 
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) 
    
    тзДанные = Новый ТаблицаЗначений;
    
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
                тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
            КонецЦикла;
        КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()


Функция ЗаписатьJSON_рекурсивно(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();     
	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьJSON,Значение,НастройкиJSON,"ФункцияПреобразованияJSON", "ргОбменДаннымиОбработкаВходящиеСервер");			

//	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Неявное);
//	ТелоСообщения =  ЗаписьJSON.Закрыть();

	
	
	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

Функция ФункцияПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка")  Тогда		
		Возврат ЗаписатьJSON_рекурсивно(Значение);	
	КонецЕсли;  
	
	Если ТипЗнч(Значение) = Тип("ДокументСсылка")  Тогда		
		Возврат ЗаписатьJSON_рекурсивно(Значение);	
	КонецЕсли; 
	
	Возврат  Строка(Значение);
	
КонецФункции
