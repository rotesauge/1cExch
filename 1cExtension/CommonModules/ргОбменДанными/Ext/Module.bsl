
#Область  РегВходящие

Процедура ргОбменРаботаСВходящими() Экспорт
	
	Попытка
		Ошибка = "";
		Пока ргОбменВходящиеВыполнитьЗадачу(Ошибка) И (Ошибка="") Цикл
		КонецЦикла;	
		
		Если Ошибка <> "" Тогда
			//
		КонецЕсли;
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменВходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	|	И НЕ ОбменДанными.ЕстьОшибка
	|	И НЕ ОбменДанными.ПометкаУдаления
	|	И ОбменДанными.ТочкаМаршрута В(&ТочкаМаршрута)";
	
	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения);
	
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Входящее);	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	РезультатВыполнения = Запрос.Выполнить();	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = РезультатВыполнения.Выбрать();
	Выб.Следующий();
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения Тогда
		ргОбменВходящиеОтправитьПОдтверждение(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда
		ргОбменВходящиеПринять(Выб.Ссылка, Ошибка);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	
	Возврат (Ошибка = "");
	
КонецФункции	

Функция ргОбменВходящиеОтправитьПодтверждение(вхЗадача,Ошибка)
	
	Получатель = вхЗадача.Отправитель;
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		НачатьТранзакцию();
		Попытка
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез = ComConnection.ConfirmMessage(XMLСтрока(вхЗадача));		
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	//
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		НачатьТранзакцию();
		Попытка
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,ложь);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,ложь);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.ConfirmMessage(XMLСтрока(вхЗадача), вхЗадача.Код, вхЗадача.ТелоОтвета);
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	//
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.HTTP Тогда
		НачатьТранзакцию();
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос;
			Стр = Новый Соответствие;
			Стр.Вставить("вхСсылка",XMLСтрока(вхЗадача));
			Стр.Вставить("вхКод",СокрЛП(вхЗадача.КодСвязи));
			Стр.Вставить("ТелоОтвета",вхЗадача.ТелоОтвета);
			HTTPЗапрос.УстановитьТелоИзСтроки(СтруктуруВСтрокуJSON(Стр), КодировкаТекста.UTF8);
			HTTPСоединение = Новый HTTPСоединение(Получатель.HTTPАдрес+
			"/ConfirmMessage", ,Получатель.Пользователь,Получатель.Пароль , , , Новый ЗащищенноеСоединениеOpenSSL);
			Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
			Рез = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			Если Ответ.КодСостояния <> 200 Тогда
				Ошибка = Строка(Ответ.КодСостояния)+" "+Рез+" "+ Получатель.HTTPАдрес+
				"/ConfirmMessage/"+
				XMLСтрока(вхЗадача)+
				"/"+СокрЛП(вхЗадача.КодСвязи);                                                                
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;                                                                
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	
	//
	Если Ошибка = "" Тогда
		НачатьТранзакцию();
		Попытка
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ДатаЗавершения = ТекущаяДата();
			ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ргОбменВходящиеПринять(Выб.Ссылка,Ошибка)()

Функция ргОбменВходящиеПринять(вхЗадача,Ошибка)
	
	Объект = Неопределено;
	
	ТелоОтвета = "";
	Результат = ргОбменДаннымиОбработкаВходящиеСервер.ргОбменВходящиеПринять(вхЗадача, Объект, ТелоОтвета, Ошибка);
	
	НачатьТранзакцию();
	Попытка
		ОБ = вхЗадача.ПолучитьОбъект();
		ОБ.Заблокировать();
		Если Объект <> Неопределено Тогда
			ОБ.Объект = Объект;
		КонецЕсли;
		ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения;
		ОБ.Ошибка = Ошибка;
		ОБ.ТелоОтвета = ТелоОтвета;
		ОБ.ЕстьОшибка = НЕ Результат;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти		 


#Область  РегИсходящие

Процедура ргОбменРаботаСИсходящими() Экспорт
	
	Попытка
		Ошибка = "";
		Пока ргОбменИсходящиеВыполнитьЗадачу(Ошибка) И (Ошибка = "")Цикл
		КонецЦикла;
		
		Если Ошибка <> "" Тогда
			//
		КонецЕсли;
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменИсходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ОбменДанными.Объект КАК Объект,
	|	ОбменДанными.ТелоСообщения КАК ТелоСообщения
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	|	И НЕ ОбменДанными.ПометкаУдаления
	|	И ОбменДанными.ТочкаМаршрута В(&ТочкаМаршрута)
	|	И ОбменДанными.ДатаСоздания <= &ТекДата
	|	И НЕ ОбменДанными.ЕстьОшибка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбменДанными.ВидСообщения.Приоритет,
	|	ОбменДанными.Код";
	
	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения);
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Исходящее);
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();	
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда	
		ргОбменИсходящиеСоздатьJSON(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения Тогда
		ргОбменИсходящиеОтправить(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения Тогда
		ргОбменИсходящиеОбработатьРезультат(Выб.Ссылка, Ошибка);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	Возврат (Ошибка = "");
	
КонецФункции

Процедура ргОбменИсходящиеСоздатьJSON(вхЗадача,Ошибка) Экспорт
	НачатьТранзакцию();
	Попытка
		ОБ = вхЗадача.ПолучитьОбъект();
		УИД = Новый УникальныйИдентификатор(вхЗадача.Объект);
		СсылкаНаОбъект = Неопределено;
		Если ПолучитьСсылкуНоМенеджеруОбъекта(Документы,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(Справочники,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыВидовХарактеристик,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыСчетов,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(ПланыОбмена,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(БизнесПроцессы,УИД,СсылкаНаОбъект) Тогда
		ИначеЕсли ПолучитьСсылкуНоМенеджеруОбъекта(Задачи,УИД,СсылкаНаОбъект) Тогда
		КонецЕсли;
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ОБ.ТелоСообщения = 	ЗаписатьJSON_рекурсивно(СсылкаНаОбъект,вхЗадача.ВидСообщения);	
		КонецЕсли;
		ОБ.ТочкаМаршрута=Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка=ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры	 


Функция ПолучитьСсылкуНоМенеджеруОбъекта(ОбъектыМенеджер,УникальныйИдентификатор,Ссылка = Неопределено)
	Ссылка = Неопределено;
	Для Каждого Менеджер Из ОбъектыМенеджер Цикл
		
		СсылкаНаОбъектГуид = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
		
		Если СсылкаНаОбъектГуид.ПолучитьОбъект() <> Неопределено Тогда
			Ссылка = СсылкаНаОбъектГуид;
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	Возврат Ложь;
	
КонецФункции

Процедура ргОбменИсходящиеОтправить(вхЗадача,Ошибка)
	
	Получатель = вхЗадача.Получатель;
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		НачатьТранзакцию();
		Попытка
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез = ComConnection.ОбменДаннымиПринятьСообщение(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код));		
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		НачатьТранзакцию();
		Попытка
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,False);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,False);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.CreateMessage(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код), СокрЛП(вхЗадача.Код));
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;                                                                
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	
	
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.HTTP Тогда
		НачатьТранзакцию();
		Попытка
			HTTPЗапрос = Новый HTTPЗапрос;
			Стр = Новый Соответствие;
			Стр.Вставить("вхСсылка",XMLСтрока(вхЗадача));
			Стр.Вставить("вхВидСообщения",ЗаписатьJSON_НЕявно(вхЗадача.ВидСообщения));
			Стр.Вставить("вхОтправитель",ЗаписатьJSON_НЕявно(вхЗадача.Отправитель));
			Стр.Вставить("вхПользователь",СокрЛП(вхЗадача.Пользователь.Код));
			Стр.Вставить("вхКод",СокрЛП(вхЗадача.КодСвязи));
			Стр.Вставить("ТелоСообщения",вхЗадача.ТелоСообщения);
			HTTPЗапрос.УстановитьТелоИзСтроки(СтруктуруВСтрокуJSON(Стр), КодировкаТекста.UTF8);
			HTTPСоединение = Новый HTTPСоединение(Получатель.HTTPАдрес+
			"/CreateMessage", ,Получатель.Пользователь,Получатель.Пароль , , , Новый ЗащищенноеСоединениеOpenSSL);
			Ответ = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
			Рез = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			Если Ответ.КодСостояния <> 200 Тогда
				Ошибка = Строка(Ответ.КодСостояния)+" "+Рез+" "+ Получатель.HTTPАдрес+
				"/CreateMessage/"+
				XMLСтрока(вхЗадача)+
				"/"+
				СокрЛП(вхЗадача.ВидСообщения.Наименование)+
				"/"+
				СокрЛП(вхЗадача.Отправитель.Код)+
				"/"+
				СокрЛП(вхЗадача.Пользователь.Код)+
				"/"+СокрЛП(вхЗадача.КодСвязи);                                                                
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;                                                                
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;	
	
	
	Если Ошибка = "" Тогда
		НачатьТранзакцию();
		Попытка
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Отправка;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры	 

Функция ргОбменИсходящиеОбработатьРезультат(исхЗадача, Ошибка)
	
	Объект = Неопределено;
	
	Результат = ргОбменДаннымиОбработкаИсходящиеСервер.ОбработатьРезультатОбъекта(исхЗадача, Ошибка);
	
	НачатьТранзакцию();
	Попытка
		ОБ = исхЗадача.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
		ОБ.Ошибка = Ошибка;
		ОБ.ЕстьОшибка = НЕ Результат;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти		 


#Область  интерфейс

Функция CreateMessage(вхСсылка, вхВидСообщения, вхОтправитель, вхТело, вхПользователь, вхКод)Экспорт
	
	НачатьТранзакцию();
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"),вхСсылка);
		
		Запрос=Новый Запрос("ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",ОбменДаннымиСсылка);
		РезЗапроса = Запрос.Выполнить();
		Если РезЗапроса.Пустой() Тогда
			ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
			ОбменДанными.УстановитьСсылкуНового(ОбменДаннымиСсылка);
			ОбменДанными.ДатаСоздания = ТекущаяДата();
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(вхВидСообщения);
			СтруктураДокументаСоответствие = ПрочитатьJSON(ЧтениеJSON,Истина);
			ЧтениеJSON.Закрыть();
			СтруктураВидСообщения  = ргОбменДаннымиОбработкаВходящиеСервер.ПолучитьСтруктуруИзСоответствия(СтруктураДокументаСоответствие).Значение;
			
			ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(СтруктураВидСообщения.Description);
			Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
				ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
				ВидСообщения.Наименование = СтруктураВидСообщения.Description;
				ЗаполнитьЗначенияСвойств(ВидСообщения,СтруктураВидСообщения);
				ВидСообщения.Записать();
				ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
			КонецЕсли; 
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(вхОтправитель);
			СтруктураДокументаСоответствие = ПрочитатьJSON(ЧтениеJSON,Истина);
			ЧтениеJSON.Закрыть();
			СтруктураОтправитель  = ргОбменДаннымиОбработкаВходящиеСервер.ПолучитьСтруктуруИзСоответствия(СтруктураДокументаСоответствие).Значение;
			
			ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(СтруктураОтправитель.Code);
			Если Не ЗначениеЗаполнено(ОбменДанными.Отправитель) Тогда
				Отправитель = Справочники.ОбменДаннымиКлиенты.СоздатьЭлемент();
				Отправитель.Наименование = СтруктураОтправитель.Description;
				ЗаполнитьЗначенияСвойств(Отправитель,СтруктураОтправитель);
				Отправитель.Записать();
				ОбменДанными.Отправитель = Отправитель.Ссылка;
			КонецЕсли; 
			ОбменДанными.Получатель = Константы.ДК_КлиентОбменаПоУмолчанию.Получить();
			ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(вхПользователь);
			Если ОбменДанными.Пользователь.Пустая() Тогда
				ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
			КонецЕсли;
			ОбменДанными.КодСвязи = вхКод;
			ОбменДанными.ТелоСообщения = вхТело;
			ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Входящее;
			ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
			ОбменДанными.Записать();
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		Возврат "ОК";	
	Исключение
		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ConfirmMessage(вхСсылка, вхКодСвязи, вхТелоОтвета) Экспорт
	
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"), вхСсылка);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка
		|	И (ОбменДанными.ТочкаМаршрута = &Точка или ОбменДанными.ТочкаМаршрута = &Точка2)
		|	И НЕ ОбменДанными.ЕстьОшибка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбменДаннымиСсылка);
		Запрос.УстановитьПараметр("Точка", Перечисления.ОбменДаннымиТочкиМаршрута.Отправка);
		Запрос.УстановитьПараметр("Точка2", Перечисления.ОбменДаннымиТочкиМаршрута.Завершено);
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			обЗадача = Выб.Ссылка.ПолучитьОбъект();
			ОбЗадача.ДатаЗавершения = ТекущаяДата();
			ОбЗадача.ТелоОтвета = вхТелоОтвета;
			ОбЗадача.КодСвязи = вхКодСвязи;
			
			Если ЗначениеЗаполнено(вхТелоОтвета) Тогда
				ОбЗадача.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения;
			Иначе
				ОбЗадача.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			КонецЕсли;
			
			ОбЗадача.Записать();			
		Иначе
			Возврат "Сообщение "+вхСсылка+" не найдено";
		КонецЕсли;
		Возврат "ОК";
	Исключение
		Возврат ОписаниеОшибки() + Символы.ПС + Строка(вхСсылка);
	КонецПопытки;
	
КонецФункции

Процедура ОтправитьВОбмен(ВидСообщения, Отправитель, Получатель, Ссылка, ТелоСообщения = "") Экспорт
	
	ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
	ОбменДанными.ДатаСоздания = ТекущаяДата();
	
	Если ТипЗнч(ВидСообщения) = Тип("СправочникСсылка.ОбменДаннымиВидыСообщений") Тогда
		ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
	Иначе
		ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(ВидСообщения);
		Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
			спрВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
			спрВидСообщения.Наименование = ВидСообщения;
			спрВидСообщения.Записать();
			ОбменДанными.ВидСообщения = спрВидСообщения.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Отправитель = Отправитель;
	Иначе
		ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Отправитель);
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Получатель = Получатель;
	Иначе
		ОбменДанными.Получатель=Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Получатель);
	КонецЕсли;
	
	ОбменДанными.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ОбменДанными.Пользователь) Тогда
		ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
	КонецЕсли;
	
	ОбменДанными.ТелоСообщения = ТелоСообщения;
	ОбменДанными.Объект = Ссылка;
	ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
	ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
	НачатьТранзакцию();
	ОбменДанными.Записать();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ЭтотОтправитель() Экспорт
	
	Возврат Константы.Расш1_КлиентОбменаПоУмолчанию.Получить();
	
КонецФункции

#КонецОбласти



Функция СтруктуруВСтрокуJSON(Структура) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура); 
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;
	
КонецФункции



Функция ЗаписатьJSON_рекурсивно(Ссылка,ВидСообшения = Неопределено)Экспорт
	
	//	ЗаписьJSON = Новый ЗаписьJSON;
	//	ЗаписьJSON.УстановитьСтроку();     
	//	НастройкиJSON = Новый НастройкиСериализацииJSON;
	//	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	//	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	//	ЗаписатьJSON(ЗаписьJSON,Значение,НастройкиJSON,"ФункцияПреобразованияJSON", ргОбменДанными);			
	
	////	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Неявное);
	////	ТелоСообщения =  ЗаписьJSON.Закрыть();
	//     ТелоСообщения = "";
	//	СтруктураРеквизитов = Новый Структура;
	//	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 
	Если не ЗначениеЗаполнено(Ссылка) Тогда
		
		Возврат "{}";	
		
	КонецЕсли;
	Значение = Ссылка.ПолучитьОбъект();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Явное);
	ТелоСообщения =  ЗаписьJSON.Закрыть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Организации.Ссылка) КАК ID
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПодразделенияОрганизаций.Ссылка)
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Должности.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Должности.Ссылка)
	|ИЗ
	|	Справочник.Должности КАК Должности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Сотрудники.Ссылка)
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ФизическиеЛица.Ссылка)
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Контрагенты.Ссылка)
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Удержания.Ссылка)
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Начисления.Ссылка)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьJSON1 = Новый ЗаписьJSON;
		ЗаписьJSON1.УстановитьСтроку(); 
		Значение1 = Выборка.Ссылка.ПолучитьОбъект();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON1,Значение1, НазначениеТипаXML.Явное);
		ТелоСообщения1 =  ЗаписьJSON1.Закрыть(); 
		//ТелоСообщения1 = ЗаписатьJSON_рекурсивно(Выборка.Ссылка,ВидСообшения);
		ТелоСообщения = СтрЗаменить(ТелоСообщения,""""+Выборка.ID+"""",ТелоСообщения1);
	КонецЦикла;
	
	Если ВидСообшения <> Неопределено Тогда
		Для каждого  ДанныеВСообщении Из ВидСообшения.Данные  Цикл
			Попытка
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Таблица.Ссылка КАК Ссылка,
				|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) КАК ID
				|ИЗ
				|	"+ДанныеВСообщении.ИмяТаблицы+" КАК Таблица";
				
				Запрос.УстановитьПараметр("Ссылка",Ссылка );
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗаписьJSON1 = Новый ЗаписьJSON;
					ЗаписьJSON1.УстановитьСтроку(); 
					Значение1 = Выборка.Ссылка.ПолучитьОбъект();
					СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON1,Значение1, НазначениеТипаXML.Явное);
					ТелоСообщения1 =  ЗаписьJSON1.Закрыть();
					//ТелоСообщения1 = ЗаписатьJSON_рекурсивно(Выборка.Ссылка,ВидСообшения);
					ТелоСообщения = СтрЗаменить(ТелоСообщения,""""+Выборка.ID+"""",ТелоСообщения1);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;                      
	//
	//		ЧтениеJSON = Новый ЧтениеJSON;
	//	ЧтениеJSON.УстановитьСтроку(ТелоСообщения);
	//	СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
	//	ЧтениеJSON.Закрыть();
	Возврат ТелоСообщения;
	//	Возврат ЗаписьJSON.Закрыть();  
КонецФункции

Функция ЗаписатьJSON_НЕявно(Ссылка)Экспорт
	
	//	ЗаписьJSON = Новый ЗаписьJSON;
	//	ЗаписьJSON.УстановитьСтроку();     
	//	НастройкиJSON = Новый НастройкиСериализацииJSON;
	//	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	//	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	//	ЗаписатьJSON(ЗаписьJSON,Значение,НастройкиJSON,"ФункцияПреобразованияJSON", ргОбменДанными);			
	
	////	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Неявное);
	////	ТелоСообщения =  ЗаписьJSON.Закрыть();
	//     ТелоСообщения = "";
	//	СтруктураРеквизитов = Новый Структура;
	//	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(); 
	Если не ЗначениеЗаполнено(Ссылка) Тогда
		
		Возврат "{}";	
		
	КонецЕсли;
	Значение = Ссылка.ПолучитьОбъект();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Неявное);
	ТелоСообщения =  ЗаписьJSON.Закрыть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Организации.Ссылка) КАК ID
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ПодразделенияОрганизаций.Ссылка)
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Должности.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Должности.Ссылка)
	|ИЗ
	|	Справочник.Должности КАК Должности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Сотрудники.Ссылка)
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ФизическиеЛица.Ссылка)
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Контрагенты.Ссылка)
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Удержания.Ссылка)
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания                   
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Начисления.Ссылка)
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВидыДоходовНДФЛ.Ссылка)
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ";
	
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьJSON1 = Новый ЗаписьJSON;
		ЗаписьJSON1.УстановитьСтроку(); 
		Значение1 = Выборка.Ссылка.ПолучитьОбъект();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON1,Значение1, НазначениеТипаXML.Неявное);
		ТелоСообщения1 =  ЗаписьJSON1.Закрыть();
		
		ТелоСообщения = СтрЗаменить(ТелоСообщения,""""+Выборка.ID+"""",ТелоСообщения1);
	КонецЦикла;
	
	//
	//		ЧтениеJSON = Новый ЧтениеJSON;
	//	ЧтениеJSON.УстановитьСтроку(ТелоСообщения);
	//	СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
	//	ЧтениеJSON.Закрыть();
	
	
	Возврат ТелоСообщения;
	
	
	
	//	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

Функция ФункцияПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();     
		НастройкиJSON = Новый НастройкиСериализацииJSON;
		НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
		НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
		ЗаписатьJSON(ЗаписьJSON,Значение,НастройкиJSON,"ФункцияПреобразованияJSON", ргОбменДанными);			
		
		//	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,Значение, НазначениеТипаXML.Неявное);
		//	ТелоСообщения =  ЗаписьJSON.Закрыть();
		
		Возврат ЗаписатьJSON_рекурсивно(Значение.ПолучитьОбъект());	
		
		
	Исключение
		Возврат  Строка(Значение);
		
	КонецПопытки;
	
КонецФункции

Процедура До_РегистрацияВОбменПередЗаписью1(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.Проведен Тогда
		РегистрацияВОбменОбъектов(Источник,Отказ);
	КонецЕсли;
КонецПроцедуры

Функция ОбъектМодифицирован(Объект, ПроверятьТабличныеЧасти = Истина, ПроверятьСтандартные = Истина) 
	Если Объект.ПометкаУдаления Тогда
		Возврат Ложь;	
	КонецЕсли;
	Ссылка = Объект.Ссылка;
	Метаданное = Ссылка.Метаданные();
	Для каждого Реквизит из Метаданное.Реквизиты Цикл
		Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьСтандартные Тогда
		Для каждого Реквизит из Метаданное.СтандартныеРеквизиты Цикл
			Если Объект[Реквизит.Имя] <> Ссылка[Реквизит.Имя] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПроверятьТабличныеЧасти Тогда
		Для каждого ТЧ из Метаданное.ТабличныеЧасти Цикл
			Если Объект[ТЧ.Имя].Количество() <> Ссылка[ТЧ.Имя].Количество() Тогда
				Возврат Истина;
			КонецЕсли;
			Для Индекс = 0 по Объект[ТЧ.Имя].Количество()-1 Цикл
				ОбъектСтрокаТЧ = Объект[ТЧ.Имя][Индекс];
				СсылкаСтрокаТЧ = Ссылка[ТЧ.Имя][Индекс];
				Для каждого РеквизитТЧ из ТЧ.Реквизиты Цикл
					Если ОбъектСтрокаТЧ[РеквизитТЧ.Имя] <> СсылкаСтрокаТЧ[РеквизитТЧ.Имя] Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;        
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучитьИмяПриложенияСеанса(НомерСоединения, Представление = Ложь) Экспорт
	ИмяПриложения = "";  
	
	СеансыИБ         = ПолучитьСеансыИнформационнойБазы();        
	Для Каждого Сеанс Из СеансыИБ Цикл         
		Если Сеанс.НомерСоединения = НомерСоединения Тогда
			Если Представление Тогда
				ИмяПриложения = ПредставлениеПриложения(Сеанс.ИмяПриложения); 
			Иначе
				ИмяПриложения = Сеанс.ИмяПриложения;
			КонецЕсли; 
		КонецЕсли;   
	КонецЦикла;
	
	Возврат ИмяПриложения;
	
КонецФункции

Функция MD5ХешСтрока(тСтрока)
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(тСтрока);
	Возврат Хеш.ХешСумма; 
КонецФункции

Процедура ДКУ_РегистрацияВОбменПередЗаписью(Источник, Отказ) Экспорт
	РегистрацияВОбменОбъектов(Источник,Отказ);
КонецПроцедуры

Процедура РегистрацияВОбменОбъектов(Источник,Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НомерСоединения  = НомерСоединенияИнформационнойБазы();
	ИмяПриложения	 = ПолучитьИмяПриложенияСеанса(НомерСоединения,Истина);
	Если ИмяПриложения = "Фоновое задание" Тогда
		Возврат;
	КонецЕсли;
	Если ОбъектМодифицирован(Источник) Тогда
		НачатьТранзакцию();
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ОбменДаннымиВидыСообщений.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ОбменДаннымиВидыСообщений КАК ОбменДаннымиВидыСообщений
			|ГДЕ
			|	ВРЕГ(ОбменДаннымиВидыСообщений.МенеджерОбъекта) = ВРЕГ(&МенеджерОбъекта)";
			Запрос.УстановитьПараметр("МенеджерОбъекта",СтрЗаменить(Строка(Типзнч(Источник))," ","") );
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
				ОбменДанными.ДатаСоздания = ТекущаяДата();
				ОбменДанными.ВидСообщения = Выборка.Ссылка;
				Попытка
					ОбменДанными.Отправитель = константы.ДК_КлиентОбменаПоУмолчанию.Получить();
				Исключение
					ОбменДанными.Отправитель = константы.Расш1_КлиентОбменаПоУмолчанию.Получить();
				КонецПопытки;
				
				//ОбменДанными.Получатель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("ДК_УНФ");
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ОбменДаннымиКлиенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ОбменДаннымиКлиенты КАК ОбменДаннымиКлиенты
				|ГДЕ
				|	ОбменДаннымиКлиенты.ОрганизацияИНН = &ОрганизацияИНН";
				Запрос.УстановитьПараметр("ОрганизацияИНН",Источник.Организация.Инн );
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ОбменДанными.Получатель =  Выборка.Ссылка;
				КонецЦикла;
				ОбменДанными.Пользователь = ПараметрыСеанса.текущийПользователь;
				ОбменДанными.КодСвязи = Новый УникальныйИдентификатор;
				ОбменДанными.Объект = Строка(Источник.Ссылка.УникальныйИдентификатор());
				ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
				ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
				ОбменДанными.Записать();
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Ошибка =  ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	
КонецПроцедуры // РегистрацияВОбменОбъектов()


Процедура EXCH_РегистрацияВОбменПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.Проведен Тогда
		РегистрацияВОбменОбъектов(Источник,Отказ);
	КонецЕсли;
	
КонецПроцедуры


Процедура ДКУ_РегистрацияВОбменПередЗаписью1(Источник, Отказ) Экспорт
	РегистрацияВОбменОбъектов(Источник,Отказ);
КонецПроцедуры

