
Функция ОбработатьРезультатОбъекта(исхЗадача, Ошибка) Экспорт
	
	Результат = Ложь;
	Если исхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ОтражениеЗарплатыВБухУчете") Тогда
		Результат = ОтражениеЗарплатыВБухучетеПринять(исхЗадача, Ошибка);
	КонецЕсли;
	
	Если исхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("РезервыПоОплатеТруда") Тогда
		Результат = РезервыПоОплатеТрудаПринять(исхЗадача, Ошибка);
	КонецЕсли;

	
	
	Возврат Результат;
	
КонецФункции

Функция ОтражениеЗарплатыВБухучетеПринять2(вхЗадача, Ошибка)
	
	СтруктураДокументаОтражения = Неопределено;
	
	НачатьТранзакцию();
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоСообщения);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Номер);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовДок = Выборка.Ссылка.ПолучитьОбъект();
			НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
			НовДок.НачисленныйНДФЛ.Очистить();
			НовДок.УдержаннаяЗарплата.Очистить();
			//	НовДок.ВыплатаОтпусковЗаСчетРезерва.Очистить();
			НовДок.ФизическиеЛица.Очистить();
		Иначе
			НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
		КонецЕсли;
		
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  СтруктураДокументаОтражения.Номер;
		НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Дата, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
		НовДок.Проведен =  СтруктураДокументаОтражения.Проведен;
		НовДок.ПериодРегистрации =  ПрочитатьДатуJson(СтруктураДокументаОтражения.ПериодРегистрации, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.ПериодРегистрации);
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.ЗарплатаОтраженаВБухучете =  СтруктураДокументаОтражения.ЗарплатаОтраженаВБухучете;
		НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
		НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
		
		НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыНеДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
			
			СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode = СтруктураЗначений.ProcessCode;
			СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат = СтруктураЗначений.ТипЗатрат;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
			
			СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
			СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленныйНДФЛНеДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
			
			СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленныйНДФЛДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
			
			СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленныйНДФЛ.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "УдержаннаяЗарплата";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтруктураЗначений);
			
			СтрокаУдержаннаяЗарплата.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
			СтрокаУдержаннаяЗарплата.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			Конецесли;
			СтрокаУдержаннаяЗарплата.Контрагент = pcru_ex_ЗУП.ПолучитьКонтрагентаWS(СтруктураЗначений.Контрагент, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "ФизическиеЛица";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаФизическиеЛица = НовДок.ФизическиеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФизическиеЛица, СтруктураЗначений);
			
			СтрокаФизическиеЛица.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НовДок.Записать();
		
		//Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		//	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		//	вхЗадачаОб.Объект = НовДок.Ссылка;
		//	вхЗадачаОб.Записать();
		//КонецЕсли;
		
		Объект = НовДок.Ссылка;
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка=ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ()


Функция ПолучитьСтруктуруИзСоответствия(ЗначВход) Экспорт
	
	СтруктураВозврат=Новый Структура;
	
	Если ТипЗнч(ЗначВход)=Тип("Соответствие") Тогда
		
		ФлагОщибка=Ложь;
		
		Для Каждого р Из ЗначВход Цикл
			Попытка
				СтруктураВозврат.Вставить(р.Ключ,ПолучитьСтруктуруИзСоответствия(р.Значение));
			Исключение
				СтруктураВозврат.Вставить("Ключ",р.Ключ);
				СтруктураВозврат.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
				//  ФлагОщибка=Истина;
				//Прервать;
			КонецПопытки;
		КонецЦикла;
		
		// Если ФлагОщибка Тогда // пришел ключь который не возможно поместить в структуру
		// СтруктураВозврат = Новый Массив;
		// Для Каждого р Из ЗначВход Цикл
		//  ДопСтруктура=Новый Структура;
		//  ДопСтруктура.Вставить("Ключ",р.Ключ);
		//  ДопСтруктура.Вставить("Значение",ПолучитьСтруктуруИзСоответствия(р.Значение));
		//  СтруктураВозврат.Добавить(ДопСтруктура);
		// КонецЦикла;
		//КонецЕсли;
		//
		Возврат СтруктураВозврат; 
		
	ИначеЕсли ТипЗнч(ЗначВход)=Тип("Массив") Тогда
		
		НовыйМассив=Новый Массив;
		Для Каждого ЭлМ Из ЗначВход Цикл
			НовыйМассив.Добавить(ПолучитьСтруктуруИзСоответствия(ЭлМ));
		КонецЦикла;
		Возврат НовыйМассив;
		
	КонецЕсли;
	
	Возврат ЗначВход; 
	
КонецФункции

// Функция преобразует ТаблицуЗначений в Массив из структур.
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) 
	
	мсДанные = Новый Массив;
	
	// Запишем в массив
	Для Каждого СтрокаТЗ Из тзДанные Цикл
		
		стСтрокаТаблицы = Новый Структура;
		Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
			стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
		КонецЦикла;
		
		мсДанные.Добавить(стСтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат мсДанные;
	
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) 
	
	тзДанные = Новый ТаблицаЗначений;
	
	Для Каждого ЭлементМассива Из мсДанные Цикл
		// Рисуем колонки для таблицы
		Если тзДанные.Колонки.Количество() = 0 Тогда
			Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
				тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем данные в таблицу
		НоваяСтрока = тзДанные.Добавить();
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тзДанные;
	
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()
//*********************************************
Функция ОтражениеЗарплатыВБухучетеПринять(вхЗадача,  Ошибка)
	
	НачатьТранзакцию();
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоОтвета);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		СтруктураДокументаОтражения  = ПолучитьСтруктуруИзСоответствия(СтруктураДокументаОтражения[0]);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтруктураДокументаОтражения.Тело);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		
		СтруктураДокументаОтражения  = ПолучитьСтруктуруИзСоответствия(СтруктураДокументаОтражения);
		
		
		СтруктураДокументаОтражения = СтруктураДокументаОтражения.Значение; 
		
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Number);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовДок = Выборка.Ссылка.ПолучитьОбъект();
			НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
			НовДок.НачисленныйНДФЛ.Очистить();
			НовДок.УдержаннаяЗарплата.Очистить();
			//	НовДок.ВыплатаОтпусковЗаСчетРезерва.Очистить();
			НовДок.ФизическиеЛица.Очистить();
		Иначе
			НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
		КонецЕсли;
		//
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  СтруктураДокументаОтражения.Number;
		НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Date, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
		НовДок.Проведен = СтруктураДокументаОтражения.Posted;
		НовДок.ПериодРегистрации =  ПрочитатьДатуJson(СтруктураДокументаОтражения.ПериодРегистрации, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.ПериодРегистрации);
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.ЗарплатаОтраженаВБухучете = СтруктураДокументаОтражения.ЗарплатаОтраженаВБухучете;
		НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
		НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
		
		
		ТЗ =   ПреобразоватьМассивВТаблицуЗначений(СтруктураДокументаОтражения.НачисленнаяЗарплатаИВзносы); 
		ТЗ.колонки.Добавить("ProcessCode");
		ТЗ.колонки.Добавить("pcru_ex_ТипЗатрат");
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			
			СтрокаТЗ.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтрокаТЗ.Подразделение.Значение.Code);
			
			СтрокаТЗ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтрокаТЗ.ВидОперации);
			Если ТипЗнч(СтрокаТЗ.СпособОтраженияЗарплатыВБухучете) = Тип("Структура") Тогда
     			СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтрокаТЗ.СпособОтраженияЗарплатыВБухучете.Значение.Description);
			КонецЕсли;
			
			СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ);
			
			СтрокаТЗ.ProcessCode = СтрокаТЗ.ФизическоеЛицо.Значение.pcru_ProcessCode;
			СтрокаТЗ.pcru_ex_ТипЗатрат = СтрокаТЗ.ФизическоеЛицо.Значение.pcru_ТипЗатрат;
			СтрокаТЗ.ПериодПринятияРасходов = ПрочитатьДатуJson(СтрокаТЗ.ПериодПринятияРасходов, ФорматДатыJSON.ISO);  
			
		КонецЦикла;
		
		
		
		
		
		ТЗ.Свернуть("ProcessCode,pcru_ex_ТипЗатрат, ВидНачисленияОплатыТрудаДляНУ, ВидОперации, ОблагаетсяЕНВД,ПериодПринятияРасходов,Подразделение,РезервБУ,РезервНУ,СпособОтраженияЗарплатыВБухучете",
		"ВзносыПоЕдиномуТарифу, ПФРДоПредельнойВеличины, ПФРЗаЗанятыхНаПодземныхИВредныхРаботах, 
		|ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки, ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка, 
		|ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах, ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки, ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
		|ПФРНаДоплатуЛетчикам, ПФРНаДоплатуШахтерам, ПФРНакопительная, ПФРПоСуммарномуТарифу, ПФРСПревышения, ПФРСтраховая, Сумма,
		|ТФОМС, ФСС, ФССНесчастныеСлучаи, ФФОМС"); 
		
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,СтрокаТЗ);   
			СтрокаНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины =  СтрокаТЗ.ВзносыПоЕдиномуТарифу;

		КонецЦикла;
		
		
		ТЗ =   ПреобразоватьМассивВТаблицуЗначений(СтруктураДокументаОтражения.НачисленныйНДФЛ); 
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			СтрокаТЗ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтрокаТЗ.ВидОперации);
		КонецЦикла;
		
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,СтрокаТЗ);
		КонецЦикла;
		
		
		
		ТЗ =   ПреобразоватьМассивВТаблицуЗначений(СтруктураДокументаОтражения.УдержаннаяЗарплата); 
		
		
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			
			СтрокаТЗ.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтрокаТЗ.Подразделение.Значение.Code);
			
			СтрокаТЗ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтрокаТЗ.ВидОперации);
			
		КонецЦикла;
		
		
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата,СтрокаТЗ);
		КонецЦикла;
		
		
		//
		//НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыНеДоходыКонтрагентов";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
		//	ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
		//	
		//	СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode = СтруктураЗначений.ProcessCode;
		//	СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат = СтруктураЗначений.ТипЗатрат;
		//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
		//	СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		//НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыДоходыКонтрагентов";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
		//	ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
		//	
		//	СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
		//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
		//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		//НаименованиеТЧДокумента = "НачисленныйНДФЛНеДоходыКонтрагентов";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
		//	ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
		//	
		//	СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		//НаименованиеТЧДокумента = "НачисленныйНДФЛДоходыКонтрагентов";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
		//	ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
		//	
		//	СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
		//	СтрокаНачисленныйНДФЛ.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		//НаименованиеТЧДокумента = "УдержаннаяЗарплата";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтруктураЗначений);
		//	
		//	СтрокаУдержаннаяЗарплата.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
		//	СтрокаУдержаннаяЗарплата.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
		//	Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
		//		СтрокаУдержаннаяЗарплата.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
		//	Конецесли;
		//	СтрокаУдержаннаяЗарплата.Контрагент = pcru_ex_ЗУП.ПолучитьКонтрагентаWS(СтруктураЗначений.Контрагент, вхЗадача.Отправитель);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		//НаименованиеТЧДокумента = "ФизическиеЛица";
		//НомерСтрокиТЧ = 0;
		//Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
		//	СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
		//	
		//	СтрокаФизическиеЛица = НовДок.ФизическиеЛица.Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаФизическиеЛица, СтруктураЗначений);
		//	
		//	СтрокаФизическиеЛица.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
		//	
		//	НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		//КонецЦикла;
		//
		НовДок.Записать();
		
		Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
			вхЗадачаОб = вхЗадача.ПолучитьОбъект();
			вхЗадачаОб.Объект = НовДок.Ссылка;
			вхЗадачаОб.Записать();
		КонецЕсли;
		
		Объект = НовДок.Ссылка;
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка=ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ()

Функция РезервыПоОплатеТрудаПринять(вхЗадача,  Ошибка)
	
	НачатьТранзакцию();
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоОтвета);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		СтруктураДокументаОтражения  = ПолучитьСтруктуруИзСоответствия(СтруктураДокументаОтражения[0]);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтруктураДокументаОтражения.Тело);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON,Истина);
		ЧтениеJSON.Закрыть();
		
		
		СтруктураДокументаОтражения  = ПолучитьСтруктуруИзСоответствия(СтруктураДокументаОтражения);
		
		
		СтруктураДокументаОтражения = СтруктураДокументаОтражения.Значение; 
		
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Number);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РезервыПоОплатеТруда КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовДок = Выборка.Ссылка.ПолучитьОбъект();
			НовДок.ОценочныеОбязательства.Очистить();
				Иначе
			НовДок = Документы.РезервыПоОплатеТруда.СоздатьДокумент();
		КонецЕсли;
		//
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  СтруктураДокументаОтражения.Number;
		НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Date, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
		НовДок.Проведен = СтруктураДокументаОтражения.Posted;
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
		НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
		НовДок.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда[СтруктураДокументаОтражения.ВидОперации];
	    НовДок.МесяцНачисления	= ПрочитатьДатуJson(СтруктураДокументаОтражения.МесяцНачисления, ФорматДатыJSON.ISO);
		
		
		НаименованиеРезерва = СтруктураДокументаОтражения.Резерв.Значение.Description;
		
		Резерв = Справочники.Резервы.НайтиПоНаименованию(НаименованиеРезерва);
		
		Если ЗначениеЗаполнено(Резерв) Тогда
			
			НовДок.Резерв = Резерв;
   		
		Иначе
		
		НовыйРезерв = Справочники.Резервы.СоздатьЭлемент();	
		НовыйРезерв.Наименование  = НаименованиеРезерва;
	    НовыйРезерв.Записать();
		НовДок.Резерв = НовыйРезерв.Ссылка;

		КонецЕсли;
		
		
		Попытка
			НовДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    НовДок.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;

		
		
		ТЗ =   ПреобразоватьМассивВТаблицуЗначений(СтруктураДокументаОтражения.ОценочныеОбязательстваПоСотрудникам); 
		ТЗ.колонки.Добавить("ProcessCode");
		ТЗ.колонки.Добавить("pcru_ex_ТипЗатрат");
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			
			СтрокаТЗ.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтрокаТЗ.Подразделение.Значение.Code);
			
			//СтрокаТЗ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтрокаТЗ.ВидОперации);
			//
			СтрокаТЗ.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтрокаТЗ.СпособОтраженияЗарплатыВБухучете.Значение.Description);
			
			//СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтрокаТЗ.ВидНачисленияОплатыТрудаДляНУ);
			
			СтрокаТЗ.ProcessCode = СтрокаТЗ.Сотрудник.Значение.pcru_ProcessCode;
			СтрокаТЗ.pcru_ex_ТипЗатрат = СтрокаТЗ.Сотрудник.Значение.pcru_ТипЗатрат;
			//СтрокаТЗ.ПериодПринятияРасходов = ПрочитатьДатуJson(СтрокаТЗ.ПериодПринятияРасходов, ФорматДатыJSON.ISO);  
			
		КонецЦикла;
		
		
		
		
		//
		ТЗ.Свернуть("ProcessCode,pcru_ex_ТипЗатрат, СтатьяФинансирования, ФиксЗаполнение,Подразделение,ФиксСтрока,ФиксРасчет,СпособОтраженияЗарплатыВБухучете",
		"СуммаРезерва, СуммаРезерваНУ, СуммаРезерваСтраховыхВзносов, 
		|СуммаРезерваСтраховыхВзносовНУ, СуммаРезерваФССНесчастныеСлучаи, 
		|СуммаРезерваФССНесчастныеСлучаиНУ"); 
		
		
		Для каждого СтрокаТЗ Из ТЗ Цикл
			
			СтрокаОценочныеОбязательства = НовДок.ОценочныеОбязательства.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаОценочныеОбязательства,СтрокаТЗ);   
		//	СтрокаНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины =  СтрокаТЗ.ВзносыПоЕдиномуТарифу;

		КонецЦикла;
		
		//
		Попытка
			НовДок.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		    НовДок.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
		Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
			вхЗадачаОб = вхЗадача.ПолучитьОбъект();
			вхЗадачаОб.Объект = НовДок.Ссылка;
			вхЗадачаОб.Записать();
		КонецЕсли;
		
		Объект = НовДок.Ссылка;
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка=ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ()



Функция ОтражениеЗарплатыВБухучетеПринять1(исхЗадача, Ошибка)
	
	СтруктураДокументаОтражения = Неопределено;
	
	
	
	НачатьТранзакцию();
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(исхЗадача.ТелоОтвета);
		МассивДокументовОтражения = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Запрос = Новый Запрос;		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";
		
		Для Каждого СтрокаДокументаОтражения Из МассивДокументовОтражения Цикл			
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаДокументаОтражения.Тело);
			ЧтениеJSON.Закрыть();
			
			Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Номер);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовДок = Выборка.Ссылка.ПолучитьОбъект();
				НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
				НовДок.НачисленныйНДФЛ.Очистить();
				НовДок.УдержаннаяЗарплата.Очистить();
				//НовДок.ВыплатаОтпусковЗаСчетРезерва.Очистить();
				НовДок.ФизическиеЛица.Очистить();
			Иначе
				НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
			КонецЕсли;
			
			НовДок.Бухгалтер = ""; 
			НовДок.Номер =  СтруктураДокументаОтражения.Номер;
			НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Дата, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
			НовДок.Проведен =  СтруктураДокументаОтражения.Проведен;
			НовДок.ПериодРегистрации =  ПрочитатьДатуJson(СтруктураДокументаОтражения.ПериодРегистрации, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.ПериодРегистрации);
			НовДок.Организация =  pcru_УМФО.Организация();
			НовДок.ЗарплатаОтраженаВБухучете =  СтруктураДокументаОтражения.ЗарплатаОтраженаВБухучете;
			НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
			НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
			
			НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыНеДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
				СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
				СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode = СтруктураЗначений.ProcessCode;
				СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат = СтруктураЗначений.ТипЗатрат;
				СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];				
				СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);				
				СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
				СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленныйНДФЛНеДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];				
				СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
				СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленныйНДФЛДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
				СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленныйНДФЛ.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "УдержаннаяЗарплата";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтруктураЗначений);
				СтрокаУдержаннаяЗарплата.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
				СтрокаУдержаннаяЗарплата.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
					СтрокаУдержаннаяЗарплата.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				Конецесли;
				СтрокаУдержаннаяЗарплата.Контрагент = pcru_ex_ЗУП.ПолучитьКонтрагентаWS(СтруктураЗначений.Контрагент, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "ФизическиеЛица";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаФизическиеЛица = НовДок.ФизическиеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФизическиеЛица, СтруктураЗначений);
				СтрокаФизическиеЛица.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			НовДок.Записать();
			
		КонецЦикла;
		
		//
		
		//
		////Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		////	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		////	вхЗадачаОб.Объект = НовДок.Ссылка;
		////	вхЗадачаОб.Записать();
		////КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции